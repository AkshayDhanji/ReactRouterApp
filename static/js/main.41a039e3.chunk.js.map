{"version":3,"sources":["App.js","Users.js","Contact.js","NotFound.js","AboutUs.js","serviceWorker.js","index.js"],"names":["App","React","Component","User","match","params","id","Users","console","log","this","props","activeClassName","to","path","component","Contact","onSubmit","e","fetch","method","body","JSON","stringify","name","state","email","async","then","response","json","undefined","setState","result","ontxtChange","document","getElementsByClassName","value","placeholder","type","className","onChange","onClick","NotFound","About","url","Company","PersonalInfo","Boolean","window","location","hostname","browserrouting","exact","AboutUs","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.41a039e3.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Home</h1>\n      </div>\n    )\n  }\n}","import React from 'react';\r\nimport { Route, NavLink } from 'react-router-dom';\r\n\r\nconst User = ({ match }) => (\r\n    <div>\r\n        This is User {match.params.id}\r\n    </div>\r\n)\r\nexport default class Users extends React.Component {\r\n    render() {\r\n        console.log(this.props.match.params.id)//get the value of the querystring sent in the URL\r\n        return (\r\n            <div>\r\n                <h1>Users</h1>\r\n                <ul>\r\n                    <li>\r\n                        <NavLink activeClassName=\"active\" to=\"/Users/1\">User 1</NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink activeClassName=\"active\" to=\"/Users/2\">User 2</NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink activeClassName=\"active\" to=\"/Users/3\">User 3</NavLink>\r\n                    </li>\r\n                </ul>\r\n                <Route path=\"/Users/:id\" component={User} />\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Contact extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            email: '',\r\n            result: ''\r\n        }\r\n    }\r\n    onSubmit = (e) => {\r\n        fetch('http://localhost:3001/api/submitContact', {\r\n            method: 'POST',           \r\n            body: JSON.stringify({\r\n                name: this.state.name,\r\n                email: this.state.email\r\n            }),            \r\n            async: true            \r\n        })\r\n            .then((response) => (response.json())\r\n                .then(json => {\r\n                    if (json !== undefined) {\r\n                        this.setState({\r\n                            result : 'Contact saved successfully'\r\n                        })\r\n                    }\r\n                }));\r\n    }\r\n\r\n    ontxtChange = () => {\r\n        this.setState({\r\n            name: document.getElementsByClassName(\"name\")[0].value,\r\n            email: document.getElementsByClassName(\"email\")[0].value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form>\r\n                <h1>Contact</h1>\r\n                <input placeholder=\"Enter Name\" type=\"name\" className=\"name\" onChange={this.ontxtChange} /><br />\r\n                <input placeholder=\"Enter EmailId\" type=\"email\" className=\"email\" onChange={this.ontxtChange} /><br />\r\n                <button onClick={this.onSubmit}>Submit</button>\r\n                <p>{this.state.result}</p>\r\n            </form>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nexport default class NotFound extends React.Component{\r\n    render(){\r\n        return(\r\n            <h1>Page Not Found</h1>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { Route, NavLink, Switch } from 'react-router-dom';\r\nimport NotFound from './NotFound';\r\n\r\nexport default class About extends React.Component {\r\n\r\n    render() {\r\n        const { match } = this.props;\r\n        console.log(match);\r\n        return (\r\n            <div>\r\n                <h1>About Us</h1>\r\n                <ul>\r\n                    <li>\r\n                        <NavLink to={`${match.url}/Company`}>Company</NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink to={`${match.url}/PersonalInfo`}>Personal Info</NavLink>\r\n                    </li>\r\n                </ul>\r\n\r\n                <Switch>\r\n                    <Route path={`${match.url}/Company`} component={Company} />\r\n                    <Route path={`${match.url}/PersonalInfo`} component={PersonalInfo} />\r\n                    <Route component={NotFound} />\r\n                </Switch>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst Company = () => (\r\n    <div>\r\n        <h1>Company</h1>\r\n    </div>\r\n)\r\n\r\nconst PersonalInfo = () => (\r\n    <div>\r\n        <h1>Personal Info</h1>\r\n    </div>\r\n)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Users from './Users';\nimport Contact from './Contact';\nimport AboutUs from './AboutUs'\nimport { Route, BrowserRouter as Router, HashRouter, Switch, NavLink, Redirect } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\nimport NotFound from './NotFound';\n\nconst browserrouting = (\n    <Router>\n        <div>\n            <ul>\n                <li>\n                <NavLink exact activeClassName=\"active\" to=\"/\">Home</NavLink>\n                </li>\n                <li>\n                <NavLink activeClassName=\"active\" to=\"/Users\">Users</NavLink>\n                </li>\n                <li>\n                <NavLink activeClassName=\"active\" to=\"/Contact\">Contact</NavLink>\n                </li>\n                <li>\n                <NavLink activeClassName=\"active\" to=\"/AboutUs\">About Us</NavLink>\n                </li>\n            </ul>\n            <Switch>\n                <Route exact path=\"/\" component={App}/>\n                <Route path=\"/Users\" component={Users}/>\n                <Route path=\"/Contact\" component={Contact}/>\n                <Route path=\"/AboutUs\" component={AboutUs}/>\n                <Route component={NotFound} />\n            </Switch>\n            <Redirect to=\"/\"/>\n        </div>\n    </Router>\n)\n\n// const hashrouting = (\n//     <HashRouter>\n//         <div>\n//             <h1>Hash Router</h1>\n//         </div>\n//     </HashRouter>\n// )\n\nReactDOM.render(browserrouting, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}